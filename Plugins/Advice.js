const axios = require('axios');

module.exports = {
    usage: ['advice', 'tip'],
    description: 'Get a random piece of advice to ponder',
    emoji: 'ðŸ’¡',
    commandType: 'Inspirational',
    isWorkAll: true,

    async execute(sock, m) {
        try {
            const response = await axios.get('https://api.adviceslip.com/advice');
            const adviceData = response.data.slip;

            if (!adviceData || !adviceData.advice) {
                throw new Error('Invalid advice response from API');
            }

            // Enhanced Aesthetic UI
            const adviceText = `
â•­â€¢ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ âœ¾ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â€¢â•®
â”Š ðŸ’­  Word of Wisdom  ðŸ’­  
â•°â€¢ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ âœ¾ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â€¢â•¯

â•­â”€â”€â”€ ï½¥ ï½¡ï¾Ÿâ˜†: *.â˜½ .* :â˜†ï¾Ÿ. â”€â”€â”€â•®
â”Š ${adviceData.advice}
â•°â”€â”€â”€ ï½¥ ï½¡ï¾Ÿâ˜†: *.â˜½ .* :â˜†ï¾Ÿ. â”€â”€â”€â•¯
`;
            await sock.sendMessage(m.key.remoteJid, { text: adviceText }, { quoted: m });
        } catch (error) {
            console.error('Error fetching advice:', error.message);
            
            // Fallback Quote in Case of Error
            const fallbackQuotes = [
                "The journey of a thousand miles begins with a single step.",
                "Believe you can and you're halfway there.",
                "Don't watch the clock; do what it does. Keep going.",
            ];
            const randomQuote = fallbackQuotes[Math.floor(Math.random() * fallbackQuotes.length)];

            const errorText = `
â•­â€¢ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ âœ¾ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â€¢â•®
â”Š âœ¨  A Little Inspiration  âœ¨
â•°â€¢ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ âœ¾ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ â€¢â•¯

â•­â”€â”€â”€ ï½¥ ï½¡ï¾Ÿâ˜†: *.â˜½ .* :â˜†ï¾Ÿ. â”€â”€â”€â•®
â”Š ${randomQuote}
â•°â”€â”€â”€ ï½¥ ï½¡ï¾Ÿâ˜†: *.â˜½ .* :â˜†ï¾Ÿ. â”€â”€â”€â•¯
`;

            await sock.sendMessage(m.key.remoteJid, { text: errorText }, { quoted: m });
        }
    }
};
